name: Deploy Docs (multi-version + switcher)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # If this is a project site (username.github.io/REPO), set BASE_PATH to /REPO
      # If it's a user/org site or custom domain, set to /
      BASE_PATH: /BT-Character-Management-System-Docs
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Versions exists
        run: |
          if [ ! -d "Versions" ]; then
            echo "Versions folder not found. Nothing to deploy." >&2
            exit 1
          fi

      - name: Determine versions (sorted) and latest
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          # Collect folder names like V1.0.0, V1.1.0, etc (strip V to sort -V)
          mapfile -t DIRS < <(find Versions -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sed 's/^V//' | sort -V)
          if [ ${#DIRS[@]} -eq 0 ]; then
            echo "No version folders found in Versions/" >&2
            exit 1
          fi

          LATEST="V${DIRS[-1]}"

          # JSON array like ["V1.0.0","V1.1.0",...]
          JSON_VERSIONS=$(printf '%s\n' "${DIRS[@]}" | sed 's/^/V/' | jq -R . | jq -sc .)

          {
            echo "latest=$LATEST"
            echo "versions<<JSON"
            printf '%s\n' "$JSON_VERSIONS"
            echo "JSON"
          } >> "$GITHUB_OUTPUT"

          echo "Detected versions: $JSON_VERSIONS"
          echo "Latest: $LATEST"

      - name: Build publish tree
        run: |
          mkdir -p _site
          rsync -a Versions/ _site/Versions/
          touch _site/.nojekyll

          # Root index and 404 that redirect to latest
          cat > _site/index.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <meta http-equiv="refresh" content="0; url=__BASE__/Versions/__LATEST__/">
          <script>location.replace("__BASE__/Versions/__LATEST__/");</script>
          HTML
          sed -i "s|__BASE__|${BASE_PATH}|g" _site/index.html
          sed -i "s|__LATEST__|${{ steps.versions.outputs.latest }}|g" _site/index.html

          cat > _site/404.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <meta http-equiv="refresh" content="0; url=__BASE__/Versions/__LATEST__/">
          <script>location.replace("__BASE__/Versions/__LATEST__/");</script>
          HTML
          sed -i "s|__BASE__|${BASE_PATH}|g" _site/404.html
          sed -i "s|__LATEST__|${{ steps.versions.outputs.latest }}|g" _site/404.html

          # Optional: expose /latest/ alias (uncomment to enable)
          # rsync -a "_site/Versions/${{ steps.versions.outputs.latest }}/" "_site/latest/"

      - name: Write versions.json
        run: |
          cat > _site/versions.json <<JSON
          {
            "basePath": "${BASE_PATH}",
            "latest": "${{ steps.versions.outputs.latest }}",
            "versions": ${{ steps.versions.outputs.versions }}
          }
          JSON

      - name: Add version switcher assets
        run: |
          mkdir -p _site/assets/version-switcher

          # CSS
          cat > _site/assets/version-switcher/version-switcher.css <<'CSS'
          .btvs {
            position: fixed; top: 16px; right: 16px; z-index: 99999;
            display: flex; gap: 8px; align-items: center;
            padding: 8px 12px; border-radius: 10px; box-shadow: 0 6px 20px rgba(0,0,0,.15);
            backdrop-filter: blur(6px);
            background: rgba(32, 35, 42, 0.85); color: #fff; font: 14px/1.2 system-ui, Segoe UI, Roboto, Arial, sans-serif;
          }
          .btvs select {
            border: 1px solid rgba(255,255,255,.2);
            background: transparent; color: inherit; padding: 6px 8px; border-radius: 8px;
          }
          .btvs .tag {
            font-size: 12px; padding: 2px 6px; border-radius: 6px; background: rgba(255,255,255,.15);
          }
          .btvs .sep { opacity: .5 }
          @media (max-width: 520px) {
            .btvs { top: auto; bottom: 16px; right: 16px; }
          }
          CSS

          # JS
          cat > _site/assets/version-switcher/version-switcher.js <<'JS'
          (async function(){
            try {
              // Detect current base path and version from /Versions/Vx.y.z/
              const m = location.pathname.match(/^(.*)\/Versions\/(V[^/]+)\//);
              const basePathFromUrl = m ? m[1] : '';
              const currentVersion = m ? m[2] : null;

              // Fetch shared metadata
              const versionsUrl = (basePathFromUrl || '') + '/versions.json';
              const meta = await fetch(versionsUrl, { cache: 'no-store' }).then(r => r.json());

              const basePath = meta.basePath || basePathFromUrl || '';
              const versions = meta.versions || [];
              const latest = meta.latest || (versions[versions.length-1] || null);

              // Build UI
              const wrap = document.createElement('div');
              wrap.className = 'btvs';
              wrap.innerHTML = `
                <span class="sep">Docs</span>
                <span class="tag">v</span>
                <select aria-label="Select documentation version"></select>
                <span class="tag" title="Latest stable">Latest</span>
                <span>${latest || ''}</span>
              `;
              const select = wrap.querySelector('select');

              // Populate versions (descending semver)
              const vs = [...versions].sort((a,b)=>{
                const av = a.replace(/^V/,'').split('.').map(Number);
                const bv = b.replace(/^V/,'').split('.').map(Number);
                for (let i=0;i<Math.max(av.length,bv.length);i++){
                  const d = (bv[i]||0)-(av[i]||0);
                  if (d) return d;
                }
                return 0;
              });
              vs.forEach(v=>{
                const opt = document.createElement('option');
                opt.value = v;
                opt.textContent = v + (v===latest ? '  â€¢' : '');
                select.appendChild(opt);
              });
              if (currentVersion && vs.includes(currentVersion)) select.value = currentVersion;
              else if (latest) select.value = latest;

              // Navigate helper: try same relative path in target version; fallback to version root
              async function navigateToVersion(v){
                const rest = m ? location.pathname.replace(/^(.*)\/Versions\/(V[^/]+)\//, '') : '';
                const targetSame = `${basePath}/Versions/${v}/${rest}`;
                if (!rest) { location.href = targetSame; return; }
                try {
                  const ok = await fetch(targetSame, { method: 'HEAD', cache: 'no-store' }).then(r => r.ok);
                  location.href = ok ? targetSame : `${basePath}/Versions/${v}/`;
                } catch {
                  location.href = `${basePath}/Versions/${v}/`;
                }
              }

              select.addEventListener('change', e=> navigateToVersion(e.target.value));

              // Mount
              const style = document.createElement('link');
              style.rel = 'stylesheet';
              style.href = (basePath || '') + '/assets/version-switcher/version-switcher.css';
              document.documentElement.appendChild(style);
              document.documentElement.appendChild(wrap);
            } catch (e) {
              console.warn('Version switcher failed:', e);
            }
          })();
          JS

      - name: Inject switcher into all version pages
        shell: bash
        run: |
          # Inject the script tag into every HTML file under Versions/**
          find _site/Versions -type f -name '*.html' | while read -r file; do
            # Skip already-injected files
            if grep -q 'assets/version-switcher/version-switcher.js' "$file"; then
              continue
            fi

            if grep -q '</body>' "$file"; then
              awk -v base="${BASE_PATH}" '
                BEGIN{injected=0}
                /<\/body>/ && injected==0 {
                  print "  <script src=\"" base "/assets/version-switcher/version-switcher.js\" defer></script>"
                  injected=1
                }
                {print}
              ' "$file" > "$file.tmp" && mv "$file.tmp" "$file"
            else
              printf '\n<script src="%s/assets/version-switcher/version-switcher.js" defer></script>\n' "${BASE_PATH}" >> "$file"
            fi
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
