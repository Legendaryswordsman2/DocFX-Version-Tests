name: Deploy Docs (multi-version + header switcher)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BASE_PATH: /DocFX-Version-Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Versions exists
        run: |
          if [ ! -d "Versions" ]; then
            echo "Versions folder not found. Nothing to deploy." >&2
            exit 1
          fi

      - name: Determine versions (sorted) and latest
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mapfile -t DIRS < <(find Versions -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sed 's/^V//' | sort -V)
          if [ ${#DIRS[@]} -eq 0 ]; then
            echo "No version folders found in Versions/" >&2
            exit 1
          fi

          LATEST="V${DIRS[-1]}"
          JSON_VERSIONS=$(printf '%s\n' "${DIRS[@]}" | sed 's/^/V/' | jq -R . | jq -sc .)

          {
            echo "latest=$LATEST"
            echo "versions<<JSON"
            printf '%s\n' "$JSON_VERSIONS"
            echo "JSON"
          } >> "$GITHUB_OUTPUT"

      - name: Build publish tree (root = latest version)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p _site

          # Publish all versions under /Versions
          rsync -a Versions/ _site/Versions/

          # Copy latest to ROOT so base URL shows latest without redirect
          rsync -a "_site/Versions/${{ steps.versions.outputs.latest }}/" _site/

          # Prevent Jekyll processing
          touch _site/.nojekyll

          # 404 -> base root (no version)
          cat > _site/404.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <title>Not Found</title>
          <meta http-equiv="refresh" content="0; url=__BASE__/">
          <script>location.replace("__BASE__/");</script>
          HTML
          sed -i "s|__BASE__|${BASE_PATH}|g" _site/404.html

      - name: Write versions.json (metadata for the switcher)
        run: |
          cat > _site/versions.json <<JSON
          {
            "basePath": "${BASE_PATH}",
            "latest": "${{ steps.versions.outputs.latest }}",
            "versions": ${{ steps.versions.outputs.versions }}
          }
          JSON

      - name: Add version switcher JS (look/UX unchanged)
        run: |
          mkdir -p _site/assets/version-switcher
          cat > _site/assets/version-switcher/version-switcher.js <<'JS'
          (async function(){
            try {
              // Detect if URL already contains /Versions/Vx.y.z/
              const m = location.pathname.match(/^(.*)\/Versions\/(V[^/]+)\//);
              const basePathFromUrl = m ? m[1] : '';
              const currentVersion = m ? m[2] : null;

              // Infer BASE_PATH from our <script src="..."> when not in /Versions/.../
              const scriptEl = document.currentScript || document.querySelector('script[src*="assets/version-switcher/version-switcher.js"]');
              let hintedBase = '';
              if (scriptEl) {
                try {
                  const u = new URL(scriptEl.src, location.href);
                  // Trim trailing /assets/version-switcher/version-switcher.js
                  hintedBase = u.pathname.replace(/\/assets\/version-switcher\/version-switcher\.js.*$/, '');
                } catch {}
              }

              const baseGuess = basePathFromUrl || hintedBase || '';

              async function fetchMeta() {
                const candidates = [];
                if (baseGuess) candidates.push(`${baseGuess}/versions.json`);
                // try relative to current path, then site root as a last resort
                const here = location.pathname.replace(/\/$/, '');
                candidates.push(`${here}/versions.json`);
                candidates.push(`/versions.json`);
                for (const url of candidates) {
                  try {
                    const r = await fetch(url, { cache: 'no-store' });
                    if (r.ok) return await r.json();
                  } catch {}
                }
                return null;
              }

              const meta = await fetchMeta();
              if (!meta) return;

              const basePath = meta.basePath || baseGuess || '';
              const versions = Array.isArray(meta.versions) ? meta.versions.slice() : [];
              const latest = meta.latest || (versions[versions.length-1] || null);

              // Sort desc by semantic version
              versions.sort((a,b)=>{
                const av = a.replace(/^V/,'').split('.').map(Number);
                const bv = b.replace(/^V/,'').split('.').map(Number);
                for (let i=0;i<Math.max(av.length,bv.length);i++){
                  const d = (bv[i]||0)-(av[i]||0);
                  if (d) return d;
                }
                return 0;
              });

              // Build dropdown (same look/UX as before)
              const select = document.createElement('select');
              select.setAttribute('aria-label','Select documentation version');
              select.className = 'version-switcher';

              versions.forEach(v=>{
                const opt = document.createElement('option');
                opt.value = v;
                opt.textContent = v + (v===latest ? ' â€¢' : '');
                select.appendChild(opt);
              });
              if (currentVersion && versions.includes(currentVersion)) select.value = currentVersion;
              else if (latest) select.value = latest;

              async function go(v){
                const rest = m ? location.pathname.replace(/^(.*)\/Versions\/(V[^/]+)\//, '') : '';
                const targetSame = `${basePath}/Versions/${v}/${rest}`;
                if (!rest) { location.href = targetSame; return; }
                try {
                  const ok = await fetch(targetSame, { method: 'HEAD', cache: 'no-store' }).then(r => r.ok);
                  location.href = ok ? targetSame : `${basePath}/Versions/${v}/`;
                } catch {
                  location.href = `${basePath}/Versions/${v}/`;
                }
              }
              select.addEventListener('change', e => go(e.target.value));

              // Try to mount into Modern theme header; fallback remains the same
              const trySelectors = [
                '.navbar .navbar-collapse .nav.navbar-nav.navbar-right',
                '.navbar .navbar-collapse .navbar-right',
                '#navbar .nav.navbar-nav.navbar-right',
                '.navbar .navbar-collapse',
                '.navbar .container',
                '.navbar'
              ];

              let mounted = false;
              function mountRight(item){
                if (!item) return false;
                if (item.tagName === 'UL') {
                  const li = document.createElement('li');
                  li.appendChild(select);
                  item.appendChild(li);
                } else {
                  item.appendChild(select);
                }
                return true;
              }
              for (const sel of trySelectors) {
                const target = document.querySelector(sel);
                if (target && mountRight(target)) { mounted = true; break; }
              }
              if (!mounted) document.body.appendChild(select);

              // Theme-aware styles (unchanged)
              const style = document.createElement('style');
              style.textContent = `
                .version-switcher {
                  border: 1px solid var(--color-border);
                  border-radius: 4px;
                  padding: 4px 6px;
                  margin-left: 12px;
                }
                [data-theme="light"] .version-switcher {
                  background: #fff;
                  color: #000;
                }
                [data-theme="dark"] .version-switcher {
                  background: #222;
                  color: #fff;
                }
              `;
              document.head.appendChild(style);

            } catch (e) {
              console.warn('Version switcher failed:', e);
            }
          })();
          JS

      - name: Inject switcher into ALL pages (base + versioned)
        shell: bash
        run: |
          find _site -type f -name '*.html' | while read -r file; do
            # Skip if already present
            if grep -q 'assets/version-switcher/version-switcher.js' "$file"; then
              continue
            fi
            if grep -q '</body>' "$file"; then
              sed -i "/<\/body>/i <script src=\"${BASE_PATH}/assets/version-switcher/version-switcher.js\" defer></script>" "$file"
            else
              printf '\n<script src="%s/assets/version-switcher/version-switcher.js" defer></script>\n' "${BASE_PATH}" >> "$file"
            fi
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
