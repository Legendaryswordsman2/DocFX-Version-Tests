name: Deploy Docs (multi-version + header switcher)

on:
  push:
    branches: [ main ]
    paths:
      - 'Versions/**'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # For project sites, set to /<repo>. For user/org or custom domain, set to /
      BASE_PATH: /DocFX-Version-Tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Versions exists
        run: |
          if [ ! -d "Versions" ]; then
            echo "Versions folder not found. Nothing to deploy." >&2
            exit 1
          fi

      - name: Determine versions (sorted) and latest
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob
          mapfile -t DIRS < <(find Versions -maxdepth 1 -mindepth 1 -type d -printf "%f\n" | sed 's/^V//' | sort -V)
          if [ ${#DIRS[@]} -eq 0 ]; then
            echo "No version folders found in Versions/" >&2
            exit 1
          fi

          LATEST="V${DIRS[-1]}"
          JSON_VERSIONS=$(printf '%s\n' "${DIRS[@]}" | sed 's/^/V/' | jq -R . | jq -sc .)

          {
            echo "latest=$LATEST"
            echo "versions<<JSON"
            printf '%s\n' "$JSON_VERSIONS"
            echo "JSON"
          } >> "$GITHUB_OUTPUT"

      - name: Build publish tree (root = latest)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p _site
          touch _site/.nojekyll

          # Publish all versions under /Versions
          rsync -a "Versions/" "_site/Versions/"

          # Copy latest to site root so base URL serves latest (no redirect)
          rsync -a "Versions/${{ steps.versions.outputs.latest }}/" "_site/"

          # 404: prefer latest's 404 if present; else minimal fallback to latest
          if [ -f "Versions/${{ steps.versions.outputs.latest }}/404.html" ]; then
            cp "Versions/${{ steps.versions.outputs.latest }}/404.html" "_site/404.html"
          else
            cat > _site/404.html <<'HTML'
          <!doctype html>
          <meta charset="utf-8">
          <title>Not found</title>
          <p>Page not found. Go to the latest docs.</p>
          <script>
            (function(){
              var base = "{{BASE_PATH}}";
              if (!base) base = "";
              location.replace(base + "/Versions/{{LATEST}}/");
            })();
          </script>
          HTML
            sed -i "s|{{BASE_PATH}}|${BASE_PATH}|g" _site/404.html
            sed -i "s|{{LATEST}}|${{ steps.versions.outputs.latest }}|g" _site/404.html
          fi

      - name: Write versions.json
        run: |
          cat > _site/versions.json <<JSON
          {
            "basePath": "${BASE_PATH}",
            "latest": "${{ steps.versions.outputs.latest }}",
            "versions": ${{ steps.versions.outputs.versions }}
          }
          JSON

      - name: Add version switcher JS
        run: |
          mkdir -p _site/assets/version-switcher
          cat > _site/assets/version-switcher/version-switcher.js <<'JS'
          (async function(){
            try {
              // --- Robust base path resolution ---
              // Prefer the data-base attribute on the <script> tag we inject.
              const findScript = () => {
                // document.currentScript can be null with defer; fallback to scanning
                const cs = document.currentScript;
                if (cs && cs.src) return cs;
                const all = Array.from(document.getElementsByTagName('script'));
                return all.find(s => (s.src||'').includes('/assets/version-switcher/version-switcher.js')) || null;
              };
              const scriptEl = findScript();

              // Highest priority: explicit base path provided via data attribute
              const dataBase = scriptEl?.dataset?.base || '';

              // If URL includes /Versions/Vx/ capture it (used to preserve subpage paths)
              const m = location.pathname.match(/^(.*)\/Versions\/(V[^/]+)\//);
              const basePathFromUrl = m ? m[1] : '';

              // Derive from script src (absolute) by trimming the known suffix
              const baseFromSrc = (function(){
                if (!scriptEl || !scriptEl.src) return '';
                try {
                  const u = new URL(scriptEl.src, location.href);
                  return u.pathname.replace(/\/assets\/version-switcher\/version-switcher\.js.*$/, '');
                } catch { return ''; }
              })();

              // Final base path preference: data-base > baseFromSrc > basePathFromUrl > ''
              const prefixBase = dataBase || baseFromSrc || basePathFromUrl || '';
              const metaUrl = `${prefixBase}/versions.json`;

              const meta = await fetch(metaUrl, { cache: 'no-store' }).then(r => r.ok ? r.json() : null).catch(()=>null);
              if (!meta) return;

              const basePath = meta.basePath || prefixBase || '';
              const versions = Array.isArray(meta.versions) ? meta.versions.slice() : [];
              const latest   = meta.latest || (versions[versions.length-1] || null);
              const currentVersion  = m ? m[2] : null;

              // Sort descending (newest first)
              versions.sort((a,b)=>{
                const av = a.replace(/^V/,'').split('.').map(Number);
                const bv = b.replace(/^V/,'').split('.').map(Number);
                for (let i=0;i<Math.max(av.length,bv.length);i++){
                  const d = (bv[i]||0)-(av[i]||0);
                  if (d) return d;
                }
                return 0;
              });

              // Build selector (same look/behavior)
              const select = document.createElement('select');
              select.setAttribute('aria-label','Select documentation version');
              select.className = 'version-switcher';

              versions.forEach(v=>{
                const opt = document.createElement('option');
                opt.value = v;
                opt.textContent = v + (v===latest ? ' â€¢' : '');
                select.appendChild(opt);
              });
              if (currentVersion && versions.includes(currentVersion)) select.value = currentVersion;
              else if (latest) select.value = latest;

              async function go(v){
                // Preserve subpage path if possible
                const rest = m ? location.pathname.replace(/^(.*)\/Versions\/(V[^/]+)\//, '') : '';
                const targetSame = `${basePath}/Versions/${v}/${rest}`;
                if (!rest) { location.href = targetSame; return; }
                try {
                  const ok = await fetch(targetSame, { method: 'HEAD', cache: 'no-store' }).then(r => r.ok);
                  location.href = ok ? targetSame : `${basePath}/Versions/${v}/`;
                } catch {
                  location.href = `${basePath}/Versions/${v}/`;
                }
              }
              select.addEventListener('change', e => go(e.target.value));

              // Mount in the same header positions; no changes to placement
              const trySelectors = [
                '.navbar .navbar-collapse .nav.navbar-nav.navbar-right',
                '.navbar .navbar-collapse .navbar-right',
                '#navbar .nav.navbar-nav.navbar-right',
                '.navbar .navbar-collapse',
                '.navbar .container',
                '.navbar',
                'header .container',
                'header'
              ];
              let mounted = false;
              function mountRight(item){
                if (!item) return false;
                if (item.tagName === 'UL') {
                  const li = document.createElement('li');
                  li.appendChild(select);
                  item.appendChild(li);
                } else {
                  item.appendChild(select);
                }
                return true;
              }
              for (const sel of trySelectors) {
                const target = document.querySelector(sel);
                if (target && mountRight(target)) { mounted = true; break; }
              }
              if (!mounted) document.body.appendChild(select);

              // Theme-aware styles (unchanged)
              const style = document.createElement('style');
              style.textContent = `
                :root { --vs-bg: #ffffff; --vs-fg: #000000; --vs-bd: #c0c0c0; }
                [data-theme="dark"], html.theme-dark, body.theme-dark, html[data-color-mode="dark"], body[data-color-mode="dark"] {
                  --vs-bg: #222222; --vs-fg: #ffffff; --vs-bd: #444444;
                }
                @media (prefers-color-scheme: dark) {
                  :root { color-scheme: light dark; }
                  :root:not([data-theme="light"]):not(.theme-light) {
                    --vs-bg: #222222; --vs-fg: #ffffff; --vs-bd: #444444;
                  }
                }
                .version-switcher {
                  border: 1px solid var(--vs-bd);
                  border-radius: 4px;
                  padding: 4px 6px;
                  margin-left: 12px;
                  background: var(--vs-bg);
                  color: var(--vs-fg);
                }
              `;
              document.head.appendChild(style);

            } catch (e) {
              console.warn('Version switcher failed:', e);
            }
          })();
          JS

      - name: Inject switcher into all pages (root + versions)
        shell: bash
        run: |
          find _site -type f -name '*.html' ! -path '_site/assets/*' | while read -r file; do
            if grep -q 'assets/version-switcher/version-switcher.js' "$file"; then
              continue
            fi
            if grep -qi '</body>' "$file"; then
              # Insert right before </body>, and pass BASE_PATH explicitly as data-base
              sed -i "/<\/body>/I i <script src=\"${BASE_PATH}/assets/version-switcher/version-switcher.js\" defer data-base=\"${BASE_PATH}\"></script>" "$file"
            else
              # Fallback append (rare)
              printf '\n<script src="%s/assets/version-switcher/version-switcher.js" defer data-base="%s"></script>\n' "${BASE_PATH}" "${BASE_PATH}" >> "$file"
            fi
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
