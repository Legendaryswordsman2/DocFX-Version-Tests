name: Deploy Docs (multi-version + header switcher)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # IMPORTANT: project site base path (repo name) for GitHub Pages
      # The user requested this path specifically for their test repo.
      BASE_PATH: "/DocFX-Version-Tests"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Ensure Versions exists
        run: |
          if [ ! -d "Versions" ]; then
            echo "Versions folder not found. Nothing to deploy." >&2
            exit 1
          fi

      - name: Determine versions (sorted) and latest
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob

          # Collect folder names under Versions (e.g., V1.0, V1.1.0, etc.)
          mapfile -t DIRS < <(find Versions -maxdepth 1 -mindepth 1 -type d -printf "%f\n")

          if [ ${#DIRS[@]} -eq 0 ]; then
            echo "No version folders found in Versions/." >&2
            exit 1
          fi

          # Normalize for sort: strip leading 'V'/'v', sort by version (-V handles version sort)
          mapfile -t SORTED < <(printf "%s\n" "${DIRS[@]}" \
            | awk '{print $0 "|" tolower($0)}' \
            | sed -E 's/^([^|]*)\|v?([0-9].*)$/\1|\2/' \
            | sort -t'|' -k2,2V \
            | cut -d'|' -f1)

          LATEST="${SORTED[-1]}"

          echo "Found versions: ${SORTED[*]}"
          echo "Latest version folder: $LATEST"

          # Emit JSON array for later steps
          VJSON=$(printf '%s\n' "${SORTED[@]}" | jq -R . | jq -s .)
          echo "versions_json=$VJSON" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST"       >> "$GITHUB_OUTPUT"

      - name: Prepare output folder
        run: |
          set -euo pipefail
          rm -rf _publish
          mkdir -p _publish/assets

          # Copy the Versions folder verbatim
          cp -a Versions "_publish/Versions"

      - name: Create versions.json (for switcher)
        env:
          VERSIONS_JSON: ${{ steps.versions.outputs.versions_json }}
        run: |
          set -euo pipefail
          echo "${VERSIONS_JSON}" > _publish/versions.json
          jq . _publish/versions.json

      - name: Add root index.html and 404.html to redirect to latest
        env:
          LATEST: ${{ steps.versions.outputs.latest }}
        run: |
          set -euo pipefail
          cat > _publish/index.html <<EOF
          <!doctype html>
          <html>
            <head>
              <meta charset="utf-8"/>
              <meta http-equiv="refresh" content="0; url=${BASE_PATH}/Versions/${LATEST}/">
              <script>location.replace("${BASE_PATH}/Versions/${LATEST}/");</script>
              <title>Redirecting…</title>
            </head>
            <body>Redirecting to latest version…</body>
          </html>
          EOF

          # 404: send users to latest home to avoid GitHub Pages 404 when path misses version
          cat > _publish/404.html <<EOF
          <!doctype html>
          <html>
            <head>
              <meta charset="utf-8"/>
              <meta http-equiv="refresh" content="0; url=${BASE_PATH}/Versions/${LATEST}/">
              <script>location.replace("${BASE_PATH}/Versions/${LATEST}/");</script>
              <title>Not found — redirecting…</title>
            </head>
            <body>Not found — redirecting to latest version…</body>
          </html>
          EOF

      - name: Write version-switcher assets
        run: |
          set -euo pipefail

          # CSS uses DocFX Modern theme CSS variables so it auto-adapts to light/dark.
          cat > _publish/assets/version-switcher.css <<'CSS'
          :root {
            --vs-bg: var(--color-canvas-subtle, #f6f8fa);
            --vs-fg: var(--color-fg-default, #1f2328);
            --vs-border: var(--color-border-default, #d0d7de);
            --vs-hover: var(--color-neutral-muted, rgba(175,184,193,0.2));
            --vs-radius: 8px;
            --vs-pad: 6px 10px;
            --vs-font: inherit;
          }
          .vs-wrapper {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            margin-left: 0.75rem;
          }
          .vs-label {
            font: var(--vs-font);
            color: var(--vs-fg);
            opacity: 0.8;
            font-size: 0.9rem;
          }
          .vs-select {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            background: var(--vs-bg);
            color: var(--vs-fg);
            border: 1px solid var(--vs-border);
            border-radius: var(--vs-radius);
            padding: var(--vs-pad);
            font: var(--vs-font);
            line-height: 1.2;
            cursor: pointer;
          }
          .vs-select:hover, .vs-select:focus {
            outline: none;
            box-shadow: 0 0 0 3px var(--vs-hover);
          }
          /* Fallback for environments without DocFX variables */
          @media (prefers-color-scheme: dark) {
            :root {
              --vs-bg: #0d1117;
              --vs-fg: #e6edf3;
              --vs-border: #30363d;
              --vs-hover: rgba(110,118,129,0.3);
            }
          }
          CSS

          # JS inserts a <select> into the DocFX Modern header and wires up navigation.
          cat > _publish/assets/version-switcher.js <<'JS'
          (function () {
            const BASE_PATH = (window.__DOCFX_BASE_PATH || (document.currentScript && document.currentScript.dataset.basePath)) || "";
            const versionsUrl = BASE_PATH + "/versions.json";

            function getCurrentVersionFromPath() {
              const parts = location.pathname.split("/").filter(Boolean);
              const i = parts.indexOf("Versions");
              if (i >= 0 && parts[i + 1]) return parts[i + 1];
              return null;
            }

            function buildSwitcher(versions, currentVersion) {
              const label = document.createElement("span");
              label.className = "vs-label";
              label.textContent = "Version";

              const select = document.createElement("select");
              select.className = "vs-select";
              versions.forEach(v => {
                const opt = document.createElement("option");
                opt.value = v;
                opt.textContent = v;
                if (v === currentVersion) opt.selected = true;
                select.appendChild(opt);
              });

              select.addEventListener("change", () => {
                const v = select.value;
                // Keep relative page if staying inside the same doc structure; otherwise go to version root.
                // Simplest + safest: jump to version root.
                location.href = BASE_PATH + "/Versions/" + v + "/";
              });

              const wrap = document.createElement("div");
              wrap.className = "vs-wrapper";
              wrap.appendChild(label);
              wrap.appendChild(select);
              return wrap;
            }

            function insertIntoHeader(el) {
              // DocFX Modern header targets
              const spots = [
                document.querySelector("header .navbar"),
                document.querySelector("header .nav"),
                document.querySelector("header"),
                document.body
              ];
              const host = spots.find(Boolean);
              if (host) {
                // Try aligning to right side if there's a right-side container
                const rightSlot = host.querySelector('.links, .navbar-end, .nav-right');
                (rightSlot || host).appendChild(el);
              }
            }

            function ensureBasePath() {
              // Infer BASE_PATH from current path if not provided (project pages)
              if (BASE_PATH) return BASE_PATH;
              const parts = location.pathname.split("/").filter(Boolean);
              // Usually: /<repo>/...
              if (parts.length) {
                const root = "/" + parts[0];
                window.__DOCFX_BASE_PATH = root;
                return root;
              }
              window.__DOCFX_BASE_PATH = "";
              return "";
            }

            document.addEventListener("DOMContentLoaded", function () {
              const base = ensureBasePath();
              fetch((base || "") + "/versions.json")
                .then(r => r.json())
                .then(list => {
                  if (!Array.isArray(list) || list.length === 0) return;
                  const current = getCurrentVersionFromPath() || list[list.length - 1];
                  const sw = buildSwitcher(list, current);
                  insertIntoHeader(sw);
                })
                .catch(() => { /* silently ignore */ });
            });
          })();
          JS

      - name: Inject switcher into every version's HTML
        env:
          LATEST: ${{ steps.versions.outputs.latest }}
        run: |
          set -euo pipefail

          # For each version, add <link> + <script> to the <head> (idempotent).
          find "_publish/Versions" -type f -name "*.html" | while read -r file; do
            # Compute depth to root to build proper BASE_PATH reference (/DocFX-Version-Tests)
            # Since we use an absolute BASE_PATH, we can safely link to /DocFX-Version-Tests/assets/*
            if ! grep -q 'version-switcher.css' "$file"; then
              sed -i '0,/<\/head>/s//  <link rel="stylesheet" href="'"${BASE_PATH}"'\/assets\/version-switcher.css">\n  <script defer src="'"${BASE_PATH}"'\/assets\/version-switcher.js" data-base-path="'"${BASE_PATH}"'"><\/script>\n<\/head>/' "$file"
            fi
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _publish

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
